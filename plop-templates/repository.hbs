import { Injectable } from '@nestjs/common';
import { PrismaService } from 'src/prisma/prisma.service';
import { Prisma, {{pascalCase entity}} } from '@prisma/client';
import { {{properCase entity}}Repository } from '../interfaces/{{dashCase entity}}.interface';
import { {{properCase entity}}Dto } from 'src/dtos/{{dashCase entity}}/dto/{{dashCase entity}}.dto';
import { Create{{properCase entity}}Dto } from 'src/dtos/{{dashCase entity}}/dto/create-{{dashCase entity}}.dto';
import { Update{{properCase entity}}Dto } from 'src/dtos/{{dashCase entity}}/dto/update-{{dashCase entity}}.dto';

@Injectable()
export class {{properCase entity}}PrismaRepository implements {{properCase entity}}Repository {
  constructor(private readonly prisma: PrismaService) {}

  async create(data: Create{{properCase entity}}Dto): Promise<{{properCase entity}}Dto> {
    return this.prisma.{{camelCase entity}}.create({ data: data as Prisma.{{pascalCase entity}}CreateInput }) as unknown as {{properCase entity}}Dto;
  }

  async findAll(): Promise<{{properCase entity}}Dto[]> {
    return this.prisma.{{camelCase entity}}.findMany() as unknown as {{properCase entity}}Dto[];
  }

  async findById(id: string): Promise<{{properCase entity}}Dto | null> {
    return this.prisma.{{camelCase entity}}.findUnique({ where: { id: Number(id) } }) as unknown as {{properCase entity}}Dto | null;
  }

  async update(id: string, data: Update{{properCase entity}}Dto): Promise<{{properCase entity}}Dto> {
    return this.prisma.{{camelCase entity}}.update({ where: { id: Number(id) }, data: data as Prisma.{{pascalCase entity}}UpdateInput }) as unknown as {{properCase entity}}Dto;
  }

  async delete(id: string): Promise<{{properCase entity}}Dto> {
    return this.prisma.{{camelCase entity}}.delete({ where: { id: Number(id) } }) as unknown as {{properCase entity}}Dto;
  }

  async exists(id: string): Promise<boolean> {
    const count = await this.prisma.{{camelCase entity}}.count({ where: { id: Number(id) } });
    return count > 0;
  }

  // Método genérico para verificação de existência por campo único
  // Ajuste conforme o campo único da entidade (exemplo: email, name)
  // async findByUniqueField(fieldValue: string, fieldName: string = 'email'): Promise<{{properCase entity}}Dto | null> {
  //   return this.prisma.{{camelCase entity}}.findUnique({ where: { [fieldName]: fieldValue } }) as {{properCase entity}}Dto | null;
  // }
}
// Apenas repositório Prisma, sem repositório em memória. 