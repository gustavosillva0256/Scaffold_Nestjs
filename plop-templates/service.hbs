import { Injectable, Inject, NotFoundException, InternalServerErrorException } from '@nestjs/common';
import { {{properCase entity}}Repository, {{properCase entity}}FindOptions, {{properCase entity}}CountOptions, {{properCase entity}}FilterOptions } from '../interfaces/{{dashCase entity}}.interface';
import { Create{{properCase entity}}Dto } from '../../../dtos/{{dashCase entity}}/dto/create-{{dashCase entity}}.dto';
import { Update{{properCase entity}}Dto } from '../../../dtos/{{dashCase entity}}/dto/update-{{dashCase entity}}.dto';
import { {{properCase entity}}Mapper } from '../mappers/{{dashCase entity}}.mapper';

// Tipos para cache
type CacheEntry<T> = { data: T; timestamp: number };
type CacheKey = string;
type CacheParams = {{properCase entity}}FindOptions | {{properCase entity}}CountOptions | {{properCase entity}}FilterOptions | Record<string, unknown> | undefined;

@Injectable()
export class {{properCase entity}}Service {
  private cache = new Map<CacheKey, CacheEntry<unknown>>();
  private readonly CACHE_TTL = 5 * 60 * 1000; // 5 minutos

  constructor(
    @Inject('{{properCase entity}}Repository')
    private readonly repository: {{properCase entity}}Repository,
    private readonly {{camelCase entity}}Mapper: {{properCase entity}}Mapper,
  ) {}

  // ========================================
  // MÉTODOS DE CACHE
  // ========================================

  private getCacheKey(method: string, params: CacheParams): string {
    return `${method}:${JSON.stringify(params)}`;
  }

  private getFromCache<T>(key: string): T | null {
    const cached = this.cache.get(key);
    if (cached && Date.now() - cached.timestamp < this.CACHE_TTL) {
      console.debug('Cache hit para:', key);
      return cached.data as T;
    }
    if (cached) {
      this.cache.delete(key);
    }
    return null;
  }

  private setCache<T>(key: string, data: T): void {
    this.cache.set(key, { data, timestamp: Date.now() });
    console.debug('Cache set para:', key);
  }

  private clearCache(): void {
    this.cache.clear();
    console.debug('Cache limpo');
  }

  // ========================================
  // MÉTODOS DE LISTAGEM
  // ========================================

  /**
   * Lista todos os {{dashCase entity}}s com opções de filtro, paginação e ordenação
   */
  async getMany(options?: {{properCase entity}}FindOptions): Promise<Create{{properCase entity}}Dto[]> {
    const cacheKey = this.getCacheKey('getMany', options);
    const cached = this.getFromCache<Create{{properCase entity}}Dto[]>(cacheKey);
    
    if (cached) {
      return cached;
    }

    console.debug('Executando getMany com opções:', options);
    
    const {{camelCase entity}}s = await this.repository.findAll(options);
    const result = this.{{camelCase entity}}Mapper.toDtoListManual({{camelCase entity}}s);
    
    this.setCache(cacheKey, result);
    return result;
  }

  /**
   * Conta o total de {{dashCase entity}}s baseado nos filtros
   */
  async getCount(options?: {{properCase entity}}CountOptions): Promise<number> {
    const cacheKey = this.getCacheKey('getCount', options);
    const cached = this.getFromCache<number>(cacheKey);
    
    if (cached !== null) {
      return cached;
    }

    console.debug('Executando getCount com opções:', options);
    
    const result = await this.repository.count(options);
    this.setCache(cacheKey, result);
    return result;
  }

  /**
   * Busca otimizada com filtros específicos
   */
  async getWithFilters(filters: {{properCase entity}}FilterOptions): Promise<{ {{camelCase entity}}s: Create{{properCase entity}}Dto[]; total: number }> {
    const cacheKey = this.getCacheKey('getWithFilters', filters);
    const cached = this.getFromCache<{ {{camelCase entity}}s: Create{{properCase entity}}Dto[]; total: number }>(cacheKey);
    
    if (cached) {
      return cached;
    }

    console.debug('Executando getWithFilters com filtros:', filters);
    
    const { {{camelCase entity}}s, total } = await this.repository.findWithFilters(filters);
    const result = {
      {{camelCase entity}}s: this.{{camelCase entity}}Mapper.toDtoListManual({{camelCase entity}}s),
      total
    };
    
    this.setCache(cacheKey, result);
    return result;
  }

  // ========================================
  // MÉTODOS DE BUSCA
  // ========================================

  /**
   * Busca um {{dashCase entity}} específico por ID
   */
  async getOne(id: number): Promise<Create{{properCase entity}}Dto | null> {
    if (id === null || id === undefined) {
      throw new NotFoundException('ID do {{properCase entity}} é obrigatório.');
    }
    
    const cacheKey = this.getCacheKey('getOne', { id });
    const cached = this.getFromCache<Create{{properCase entity}}Dto>(cacheKey);
    
    if (cached) {
      return cached;
    }
    
    const {{camelCase entity}} = await this.repository.findById(id);
    if (!{{camelCase entity}}) {
      throw new NotFoundException('{{properCase entity}} não encontrado.');
    }
    
    const result = this.{{camelCase entity}}Mapper.toDtoManual({{camelCase entity}});
    this.setCache(cacheKey, result);
    return result;
  }

  // ========================================
  // MÉTODOS DE CRIAÇÃO
  // ========================================

  /**
   * Cria um novo {{dashCase entity}}
   */
  async createOne(data: Create{{properCase entity}}Dto): Promise<Create{{properCase entity}}Dto> {
    try {
      const {{camelCase entity}} = await this.repository.create(data);
      const result = this.{{camelCase entity}}Mapper.toDtoManual({{camelCase entity}});
      
      // Limpar cache após criação
      this.clearCache();
      
      return result;
    } catch (error) {
      throw new InternalServerErrorException('Erro ao criar {{properCase entity}}.');
    }
  }

  // ========================================
  // MÉTODOS DE ATUALIZAÇÃO
  // ========================================

  /**
   * Atualiza um {{dashCase entity}} existente
   */
  async updateOne(id: number, data: Update{{properCase entity}}Dto): Promise<Create{{properCase entity}}Dto> {
    try {
      if (id === null || id === undefined) {
        throw new NotFoundException('ID do {{properCase entity}} é obrigatório.');
      }
      
      const exists = await this.repository.exists(id);
      if (!exists) {
        throw new NotFoundException('{{properCase entity}} não encontrado.');
      }
      
      const {{camelCase entity}} = await this.repository.update(id, data);
      const result = this.{{camelCase entity}}Mapper.toDtoManual({{camelCase entity}});
      
      // Limpar cache após atualização
      this.clearCache();
      
      return result;
    } catch (error) {
      if (error instanceof NotFoundException) throw error;
      console.error('Erro ao atualizar {{properCase entity}}:', error.message);
      throw new InternalServerErrorException('Erro ao atualizar {{properCase entity}}.');
    }
  }

  // ========================================
  // MÉTODOS DE EXCLUSÃO
  // ========================================

  /**
   * Remove um {{dashCase entity}} existente
   */
  async deleteOne(id: number): Promise<Create{{properCase entity}}Dto> {
    try {
      if (id === null || id === undefined) {
        throw new NotFoundException('ID do {{properCase entity}} é obrigatório.');
      }
      
      const exists = await this.repository.exists(id);
      if (!exists) {
        throw new NotFoundException('{{properCase entity}} não encontrado.');
      }
      
      const {{camelCase entity}} = await this.repository.delete(id);
      const result = this.{{camelCase entity}}Mapper.toDtoManual({{camelCase entity}});
      
      // Limpar cache após exclusão
      this.clearCache();
      
      return result;
    } catch (error) {
      if (error instanceof NotFoundException) throw error;
      console.error('Erro ao deletar {{properCase entity}}:', error.message);
      throw new InternalServerErrorException('Erro ao deletar {{properCase entity}}.');
    }
  }
} 