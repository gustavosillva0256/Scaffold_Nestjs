import { Injectable } from '@nestjs/common';
import { PrismaService } from '../../../prisma/prisma.service';
import { Prisma, {{pascalCase entity}} } from '@prisma/client';
import { {{properCase entity}}Repository, {{properCase entity}}FindOptions, {{properCase entity}}CountOptions, {{properCase entity}}FilterOptions } from '../interfaces/{{dashCase entity}}.interface';
import { Create{{properCase entity}}Dto } from '../../../dtos/{{dashCase entity}}/dto/create-{{dashCase entity}}.dto';
import { Update{{properCase entity}}Dto } from '../../../dtos/{{dashCase entity}}/dto/update-{{dashCase entity}}.dto';
import { {{properCase entity}}Mapper } from '../mappers/{{dashCase entity}}.mapper';

// Tipos para filtros dinâmicos
type {{properCase entity}}WhereInput = Prisma.{{pascalCase entity}}WhereInput;
type {{properCase entity}}OrderByWithRelationInput = Prisma.{{pascalCase entity}}OrderByWithRelationInput;

@Injectable()
export class {{pascalCase entity}}PrismaRepository implements {{properCase entity}}Repository {
  constructor(
    private readonly prisma: PrismaService,
    private readonly {{camelCase entity}}Mapper: {{properCase entity}}Mapper
  ) {}

  async create(data: Create{{properCase entity}}Dto): Promise<{{pascalCase entity}}> {
    const prismaData = this.{{camelCase entity}}Mapper.toCreateInput(data);
    return this.prisma.{{camelCase entity}}.create({ data: prismaData });
  }

  async findAll(options?: {{properCase entity}}FindOptions): Promise<{{pascalCase entity}}[]> {
    const { limit = 10, offset = 0, orderBy, where } = options || {};
    
    // Validação de limites para evitar queries desnecessárias
    const validatedLimit = Math.min(Math.max(limit, 1), 100);
    const validatedOffset = Math.max(offset, 0);
    
    console.debug('Executando query findAll com:', {
      limit: validatedLimit,
      offset: validatedOffset,
      where: where ? 'filtros aplicados' : 'sem filtros'
    });

    return this.prisma.{{camelCase entity}}.findMany({
      where: where || undefined,
      take: validatedLimit,
      skip: validatedOffset,
      orderBy: orderBy || { id: 'desc' },
      // Seleção específica de campos para melhor performance
      select: {
        id: true,
        {{#each fields}}
        {{name}}: true,
        {{/each}}
        createdAt: true,
        updatedAt: true,
      }
    });
  }

  async findById(id: number): Promise<{{pascalCase entity}} | null> {
    if (!id || isNaN(id)) {
      return null;
    }
    return this.prisma.{{camelCase entity}}.findUnique({ 
      where: { id },
      include: {
        // Incluir relacionamentos se necessário
      }
    });
  }

  async update(id: number, data: Update{{properCase entity}}Dto): Promise<{{pascalCase entity}}> {
    const prismaData = this.{{camelCase entity}}Mapper.toUpdateInput(data);
    return this.prisma.{{camelCase entity}}.update({ 
      where: { id }, 
      data: prismaData 
    });
  }

  async delete(id: number): Promise<{{pascalCase entity}}> {
    return this.prisma.{{camelCase entity}}.delete({ where: { id } });
  }

  async exists(id: number): Promise<boolean> {
    const count = await this.prisma.{{camelCase entity}}.count({ where: { id } });
    return count > 0;
  }

  async count(options?: {{properCase entity}}CountOptions): Promise<number> {
    const { where } = options || {};
    
    console.debug('Executando count com filtros:', where ? 'aplicados' : 'sem filtros');
    
    return this.prisma.{{camelCase entity}}.count({ 
      where: where || undefined 
    });
  }

  // Método otimizado para busca com filtros específicos
  async findWithFilters(filters: {{properCase entity}}FilterOptions): Promise<{ {{camelCase entity}}s: {{pascalCase entity}}[]; total: number }> {
    const { search, limit = 10, offset = 0 } = filters;
    
    // Construir where clause dinamicamente
    const where: {{properCase entity}}WhereInput = {};
    
    // Filtros de texto simples para evitar problemas de tipagem
    if (search) {
      where.OR = [
        // Adicionar campos de busca conforme necessário
        // { name: { contains: search } },
        // { email: { contains: search } },
      ];
    }

    console.debug('Executando findWithFilters:', { filters, where });

    const [{{camelCase entity}}s, total] = await Promise.all([
      this.prisma.{{camelCase entity}}.findMany({
        where,
        take: Math.min(limit, 100),
        skip: offset,
        orderBy: { id: 'desc' },
        select: {
          id: true,
          {{#each fields}}
          {{name}}: true,
          {{/each}}
          createdAt: true,
          updatedAt: true,
        }
      }),
      this.prisma.{{camelCase entity}}.count({ where })
    ]);

    return { {{camelCase entity}}s, total };
  }
}