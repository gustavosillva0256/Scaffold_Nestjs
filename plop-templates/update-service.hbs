import { Injectable, Inject, NotFoundException, BadRequestException, InternalServerErrorException } from '@nestjs/common';
import { Update{{properCase entity}}Dto } from 'src/dtos/{{dashCase entity}}/dto/update-{{dashCase entity}}.dto';
import { {{properCase entity}}Repository } from '../interfaces/{{dashCase entity}}.interface';

@Injectable()
export class Update{{properCase entity}}Service {
  constructor(
    @Inject('{{properCase entity}}Repository')
    private readonly repository: {{properCase entity}}Repository,
  ) {}

  async execute(id: string, data: Update{{properCase entity}}Dto) {
    try {
      // ðŸ”¹ Verifica se o registro existe
      const entity = await this.repository.findById(id);
      if (!entity) {
        throw new NotFoundException("{{properCase entity}} nÃ£o encontrado.");
      }

      // ðŸ”¹ Impede atualizaÃ§Ã£o de certos campos (se necessÃ¡rio)
      {{#each fields}}
      {{#if (isImmutable this)}}
      if (data.{{name}} !== undefined) {
        throw new BadRequestException("O campo '{{name}}' nÃ£o pode ser alterado.");
      }
      {{/if}}
      {{/each}}

      // âœ… Atualiza o registro
      return await this.repository.update(id, data);
    } catch (error) {
      console.error("Erro ao atualizar {{properCase entity}}:", error.message);

      // ðŸ”¹ RelanÃ§a erros conhecidos diretamente
      if (error instanceof NotFoundException || error instanceof BadRequestException) {
        throw error;
      }

      // ðŸ”¹ Erro inesperado, relanÃ§ado como erro interno do servidor
      throw new InternalServerErrorException("Erro ao atualizar {{properCase entity}}.");
    }
  }
}
